// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Product {
  id                String    @id @default(cuid())
  internalCode      String    @unique
  description       String
  unit              String // "kg", "un", "mt", etc.
  priceUSD          Decimal?
  priceARS          Decimal?
  stock             Decimal     @default(0)
  lowStockThreshold Decimal     @default(0)
  isClassified      Boolean   @default(false)
  type              ProductType @default(RAW_MATERIAL)
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  category   Category? @relation(fields: [categoryId], references: [id])
  categoryId Int?

  supplier   Supplier? @relation(fields: [supplierId], references: [id])
  supplierId Int?

  movements      InventoryMovement[]
  components     ProductComponent[] @relation("isComponentFor")
  componentOf    ProductComponent[] @relation("componentOf")

  externalProductionItems ExternalProductionOrderItem[]
  receivedProductions     ReceivedProduction[]

  // Relación con el trabajo de armado
  trabajoDeArmado TrabajoDeArmado?
  // Relación con los costos indirectos
  overheadCosts   ProductOverhead[]
}

model ProductComponent {
  product     Product @relation("isComponentFor", fields: [productId], references: [id])
  productId   String
  component   Product @relation("componentOf", fields: [componentId], references: [id])
  componentId String
  quantity    Decimal

  @@id([productId, componentId])
}

model Category {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  products Product[]
}

model Supplier {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  contactInfo String?
  products    Product[]
}

// --- MODELOS DE COSTOS AVANZADOS ---

model OverheadCost {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  cost        Decimal
  unit        String // e.g., "HORA", "UNIDAD"
  type        OverheadType @default(OTHER)
  
  products    ProductOverhead[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model ProductOverhead {
  product       Product      @relation(fields: [productId], references: [id])
  productId     String
  overheadCost  OverheadCost @relation(fields: [overheadCostId], references: [id])
  overheadCostId String
  quantity      Decimal

  @@id([productId, overheadCostId])
}


// --- MODELOS DEL MÓDULO DE ARMADORES ---

model TrabajoDeArmado {
  id          String   @id @default(cuid())
  nombre      String   @unique
  precio      Decimal
  descripcion String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relación: Este trabajo corresponde a un único producto final.
  producto   Product  @relation(fields: [productoId], references: [id])
  productoId String   @unique
}

model ExternalProductionOrder {
  id                       String                      @id @default(cuid())
  armadorId                String
  dateSent                 DateTime
  expectedCompletionDate   DateTime?
  status                   ExternalProductionOrderStatus @default(PENDING_DELIVERY) // Default state is now PENDING_DELIVERY
  notes                    String?
  createdAt                DateTime                    @default(now())
  updatedAt                DateTime                    @updatedAt

  // New field for delivery assignment
  deliveryUserId           Int? // ID of the User (employee) assigned to deliver
  deliveryUser             User?                       @relation("Deliveries", fields: [deliveryUserId], references: [id])

  armador       Armador                     @relation(fields: [armadorId], references: [id])
  items         ExternalProductionOrderItem[]
  receivedItems ReceivedProduction[]
}

model ExternalProductionOrderItem {
  id                        String                  @id @default(cuid())
  externalProductionOrderId String
  productId                 String // Componente enviado
  quantitySent              Decimal

  order   ExternalProductionOrder @relation(fields: [externalProductionOrderId], references: [id])
  product Product                 @relation(fields: [productId], references: [id])

  @@unique([externalProductionOrderId, productId])
}

model ReceivedProduction {
  id                        String        @id @default(cuid())
  externalProductionOrderId String
  dateReceived              DateTime
  productId                 String // Producto terminado recibido
  quantityReceived          Decimal
  qualityStatus             QualityStatus @default(OK)
  notes                     String?
  createdAt                 DateTime      @default(now())

  order   ExternalProductionOrder @relation(fields: [externalProductionOrderId], references: [id])
  product Product                 @relation(fields: [productId], references: [id])
}

model AssemblerPayment {
  id          String   @id @default(cuid())
  armadorId   String
  datePaid    DateTime
  amount      Decimal
  periodStart DateTime
  periodEnd   DateTime
  notes       String?
  createdAt   DateTime @default(now())

  armador Armador @relation(fields: [armadorId], references: [id])
}

model Armador {
  id           String       @id @default(cuid())
  name         String       @unique
  contactInfo  String?
  address      String?
  phone        String?
  email        String?
  paymentTerms PaymentTerms
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt

  externalProductionOrders ExternalProductionOrder[]
  assemblerPayments        AssemblerPayment[]
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  name      String?
  password  String
  role      Role     @default(EMPLOYEE)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  movements          InventoryMovement[]
  assignedDeliveries ExternalProductionOrder[] @relation("Deliveries") // Inverse relation
}

model InventoryMovement {
  id        Int          @id @default(autoincrement())
  productId String
  type      MovementType
  quantity  Decimal
  userId    Int
  notes     String?
  createdAt DateTime     @default(now())
  eventId   String?

  product   Product      @relation(fields: [productId], references: [id])
  user      User         @relation(fields: [userId], references: [id])

  @@index([eventId])
}

// --- ENUMS ---

enum PaymentTerms {
  BI_WEEKLY
  MONTHLY
  PER_UNIT
}

enum Role {
  ADMIN
  SUPERVISOR
  EMPLOYEE
}

enum ProductType {
  RAW_MATERIAL
  PRE_ASSEMBLED
  FINISHED
}

enum MovementType {
  PURCHASE
  PRODUCTION_IN
  CUSTOMER_RETURN
  ADJUSTMENT_IN
  SENT_TO_ASSEMBLER
  RECEIVED_FROM_ASSEMBLER
  PRODUCTION_OUT
  SALE
  WASTAGE
  ADJUSTMENT_OUT
}

enum ExternalProductionOrderStatus {
  PENDING_DELIVERY // Supervisor created, ready for pickup
  OUT_FOR_DELIVERY // Assigned to an employee for delivery
  DELIVERED        // Employee confirmed successful delivery
  DELIVERY_FAILED  // Employee confirmed delivery failed
  RETURNED         // Supervisor confirmed return of goods
  PARTIALLY_RECEIVED // Assembler has returned some finished products
  COMPLETED        // All work for this order is done
  CANCELLED        // Order cancelled
}

enum QualityStatus {
  OK
  DEFECTIVE
  PARTIAL_OK
}

enum OverheadType {
  MACHINE_HOUR
  SERVICE
  DESIGN
  OTHER
}
